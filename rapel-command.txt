--initialisation de la connexion sdk gcp
gcloud init 

--Etapes TP 1

 1 -- Création d'un VPC.
 2 -- Configuration du parfeu avec le VPC.
 3 -- Création d'une vm. 
 4 -- Mise en place du serveur web.
        commande d'installation d'un serveur web
            sudo apt update
            sudo apt install apache2
 5 -- Création d'un snapshot.
 6 -- Création d'une image.
 7 -- Création d'un groupe d'instances (template d'instance).
 8 -- Création loadBalancer.

 --Commande GCS

 gsutil cp <source> <destination>
 gsutil -m cp -R data* gs://first-bucket-utopios
 gsutil -m cp -R gs://first-bucket-utopios/folderA gs://first-bucket-utopios/folderB
 gsutil -m rm -R gs://first-bucket-utopios
 gsutil iam ch serviceAccount:<address_service>:objectViewer gs://<adresse_bucket>

 -- import d'un dump à partir cloud storage vers cloud sql

 gcloud sql import sql <nom_instance> gs://<nom_bucket>/dump.gz --database=<nom_base_données>

 -- création de la base de données en cli
 gcloud sql databases create villes --instance=tp

 -- Récupérer le nom de service de l'instance cloud sql
 gcloud sql instances describe tp | grep serviceAccountEmailAddress
 -- Accorder les droits de lecture sur le bucket
  gsutil iam ch serviceAccount:<address_service>:objectViewer gs://<adresse_bucket>
 -- Ensuite la commande d'import
-- pour se connecter à une instance sql (une autre commande sql en fonction du SGBD fonctionnera également)
 -- gcloud sql connect tp --user=root

 Type Mysql    vs   Cloud Spanner
 Integer, ..        INT64
 BOOL               BOOL INT64

 -- Pour migrer vers cloud Spanner

 1 - Contraintes de migration.
    - Integrer dans la logique métier cote application, la logique des procédures SGBD.
    ...
 2 - Convertir le schéma d'une base de données Mysql vers cloud Spanner (Type de données,...)


 -- Commande Exemple BigTable
 -- Après installation du cli (gcloud components install cbt) 
 et l'ajout de Configuration dans le ficher ~/.cbtrc, 
 
 echo project = <project_id> > ~/.cbtrc
 echo instance = <nom_instance> > ~/.cbtrc

 --Création de la table
    cbt createtable <nom_table>
-- Ajout de famille de col
    cbt createfamily <nom_table> <nom_familiy>
    cbt ls  => Récupération des tables
    cbt ls <table> => col family

-- Ajouter des données
    cbt set <nom_table> <key> family:col=val

Exercice BigTable.

Créer une instance bigTable avec une table : 
    ecommerce (customers (name, city) products(name, price, category))
Le but est d'utiliser bigtable pour récupérer les données des commandes par ville et également par catégorie produit

--Correction avec le cli
cbt createtable ecommerce
cbt createfamily ecommerce customers
cbt createfamily ecommerce products

-- On peut ajouter gcc policy avec le cli
cbt setgcpolicy ecommerce customers maxversions=3
$timestamp = date +%s
$KEY = city1#cat1# + $timestamp 
cbt set ecommerce $KEY
                  customers:name=ihab 
                  customers:city=city1 
                  products:name=product1
                  products:price=30  
                  products:cat=cat1  
cbt set ecommerce city2#cat2#0003 customers:name=toto customers:city=city2 products:name=product3 products:cat=cat2 products:price=30  


cbt read ecommerce prefix=city1
cbt read ecommerce regex="^city([#a-z0-9]*)$"


--command gcp appEngine
gcloud app deploy  => Dans une application avec un fichier de déscription app.yaml